# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'


- task: TerraformInstaller@0
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: $(backendServiceArm)
    backendAzureRmResourceGroupName: 'AzureDevOpsPOC'
    backendAzureRmStorageAccountName: 'devopsvmterraformstroage'
    backendAzureRmContainerName: 'vmdemoterraformstate'
    backendAzureRmKey: 'terraform.tfstate'
  name: 'terraforminit'
  displayName: 'Initialize Terrafrom'


- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'validate'
  name: 'terraformvalidate'
  displayName: 'Validate Code'


- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-input=false -out=$(Build.BinariesDirectory)/tfplan'
    environmentServiceNameAzureRM: $(backendServiceArm)


- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: '**\*.tf'
    TargetFolder: '$(Build.BinariesDirectory)'


- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-tfplan.zip'
    replaceExistingArchive: true
    verbose: true


- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-tfplan.zip'
    artifact: '$(Build.BuildId)-tfplan'
    publishLocation: 'pipeline'